import json

import telebot
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
import schedule
import time
import datetime
import threading
from Bot.Bot_ import bot

from Bot.sql_req import get_user_byers, reg_user_byers, reg_seller_tg, get_seller_tg, \
    tg_id_in_bdinfouser, user_byers, get_auctions, start_true, get_auc


def get_id_group():
    with open("D:\–ü–∞–π—Ç–æ–Ω\Auction\Bot\id_groups.json", "r", encoding='utf-8') as read_file:
        id_all_dict = json.load(read_file)
    return id_all_dict


id_groups = get_id_group()
chat_grups = -742710832

"""–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""


def keub_start():
    keyb = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
    return keyb


def keub_reg():
    keyb = InlineKeyboardMarkup().add(
        *(InlineKeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', url='http://127.0.0.1:8000/register'),
          InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data=f'–û—Ç–º–µ–Ω–∞')))
    return keyb


def keyb_lot(id_lot, time_finish):
    keyb = InlineKeyboardMarkup()
    keyb.add(*(InlineKeyboardButton('–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', callback_data=f'#{id_lot}'),
               InlineKeyboardButton('‚è∞', callback_data=f'*{time_finish}'),
               InlineKeyboardButton('üò±', callback_data='info')
               ))
    return keyb


def keyb_lot2(id_lot, time_finish, user_id):
    keyb = InlineKeyboardMarkup()
    but1 = InlineKeyboardButton('+10 —Ä—É–±.', callback_data=f'$.10.{id_lot}')
    but2 = InlineKeyboardButton('+20 —Ä—É–±.', callback_data=f'$.20.{id_lot}')
    but3 = InlineKeyboardButton('+30 —Ä—É–±.', callback_data=f'$.30.{id_lot}')
    keyb.row(but1, but2, but3)
    but4 = InlineKeyboardButton('+40 —Ä—É–±.', callback_data=f'$.40.{id_lot}')
    but5 = InlineKeyboardButton('+50 —Ä—É–±.', callback_data=f'$.50.{id_lot}')
    but6 = InlineKeyboardButton('+100 —Ä—É–±.', callback_data=f'$.100.{id_lot}')
    keyb.row(but4, but5, but6)
    but_start = InlineKeyboardButton('–°—Ç–∞—Ä—Ç', callback_data=f'st.10.{id_lot}')
    keyb.row(but_start)

    but_auto = InlineKeyboardButton('–ê–≤—Ç–æ-—Å—Ç–∞–≤–∫–∞', callback_data=f'ast.10.{id_lot}')
    keyb.row(but_auto)
    keyb.row(*(InlineKeyboardButton('‚è∞', callback_data=f'*{time_finish}'),
               InlineKeyboardButton('üò±', callback_data='info'),
               InlineKeyboardButton('üß≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ª–æ—Ç—É', callback_data=f'dop{id_lot}')
               ))
    return keyb


def keyb_start2():
    keyd_ = InlineKeyboardMarkup()
    list_button = [['–ú–æ–∏ –∞—É–∫—Ü–∏–æ–Ω—ã', 'b21'],
                   ['–†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–∏–∑–æ–≤', 'b22'],
                   ['–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'b23'],
                   ['–ü—Ä–∞–≤–∏–ª–∞', 'b24'],
                   ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'b25'],
                   ['–¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'b26'],
                   ['–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞', 'b27'],
                   ['–ë–∞–ª–∞–Ω—Å', 'b28']
                   ]

    for but in list_button:
        keyd_.row(InlineKeyboardButton(but[0], callback_data=but[1]))
    return keyd_
    # if tg_id_in_bdinfouser(id_user):
    #     keyb_start = InlineKeyboardMarkup().row(InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=''))


def keyb_menu():
    keyd_ = InlineKeyboardMarkup().add(InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='Menu'))
    return keyd_


"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"""


def post_auction():
    pass
    chat_grup = id_groups["auction"]
    aucs = get_auctions()
    if len(aucs) < 1:
        pass
    else:
        pass
    for auc in aucs:
        start_true(auc['id_accept'])
        keyb = keyb_lot(auc['id_accept'], auc['finish_time'])
        bot.send_media_group(chat_grup,
                             [telebot.types.InputMediaPhoto(
                                 open(f'D:\–ü–∞–π—Ç–æ–Ω\Auction\my_auction\media\{photo}', 'rb'))
                                 for photo in auc['photo']])
        bot.send_message(chat_grup, f'–ù–∞–∑–≤–∞–Ω–∏–µ - {auc["name"]} \n'
                                    f'–û–ø–∏—Å–∞–Ω–∏–µ: {auc["desc"]}\n'
                                    f'–ü—Ä–æ–¥–∞–≤–µ—Ü - {auc["username"]}\n'
                                    f'—Å—Ç–æ–∏–º–æ—Å—Ç—å - {auc["price"]} –±–µ–ª–æ—Ä—É—Å–∫–∏—Ö —Ä—É–±–ª–µ–π', reply_markup=keyb)


def send_lot_in_group():
    schedule.every(5).seconds.do(post_auction)
    while True:
        schedule.run_pending()
        time.sleep(1)


"""___________________________________"""


@bot.message_handler(
    content_types=['sticker', 'voice', 'audio', 'document', 'photo', 'video', 'caption', 'contact', 'location',
                   'venue'])
def spam(message):
    bot.send_message(message.chat.id, f'–Ω–µ –ª–æ–º–∞–π –±–æ—Ç–∞ –ø–∂')
    bot.delete_message(message.chat.id, message.message_id)


@bot.message_handler(content_types=['text'])
def start(message):
    print(message)
    if message.text == '/start' and message.chat.id not in list(id_groups.values()):
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é', reply_markup=keub_start())
        bot.send_message(message.chat.id, '–Ø –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ @My_lessons_bot \n'
                                          '–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª–æ—Ç–∞–º–∏, –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å \n'
                                          '—Ö–æ–¥ –∞—É–∫—Ü–∏–æ–Ω–∞. –ê —Ç–∞–∫ –∂–µ –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ \n'
                                          '–±–∞–ª–∞–º–∏. \n'
                                          '–£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ ü§ù', reply_markup=keyb_start2())
        # bot.delete_message(message.chat.id, message.message_id)
    elif message.text == '–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        bot.send_message(message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º')
        bot.delete_message(message.chat.id, message.message_id)
    elif message.text == '/reg' and message.chat.id != chat_grups:
        bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', reply_markup=keub_reg())
        bot.delete_message(message.chat.id, message.message_id)
        if get_seller_tg(message.from_user.id):
            pass
        else:
            reg_seller_tg(message.from_user.id, message.from_user.username)


@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    if call.data[0] == '#':
        if get_user_byers(call.from_user.id):
            pass
        else:
            reg_user_byers(call.from_user.id)
        print(call.data[1:])
        auc = get_auc(str(call.data[1:]))
        print(auc)
        keyb = keyb_lot2(auc['id_accept'], auc['finish_time'])
        bot.send_media_group(call.from_user.id,
                             [telebot.types.InputMediaPhoto(
                                 open(f'D:\–ü–∞–π—Ç–æ–Ω\Auction\my_auction\media\{photo}', 'rb'))
                                 for photo in auc['photo']])
        bot.send_message(call.from_user.id, f'–ù–∞–∑–≤–∞–Ω–∏–µ - {auc["name"]} \n'
                                            f'–û–ø–∏—Å–∞–Ω–∏–µ: {auc["desc"]}\n'
                                            f'–ü—Ä–æ–¥–∞–≤–µ—Ü - {auc["username"]}\n'
                                            f'—Å—Ç–æ–∏–º–æ—Å—Ç—å - {auc["price"]} –±–µ–ª–æ—Ä—É—Å–∫–∏—Ö —Ä—É–±–ª–µ–π', reply_markup=keyb)
    elif call.data[0] == '*':
        time_now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        time_now = datetime.datetime.strptime(time_now, '%Y-%m-%d %H:%M:%S')
        time_finish = datetime.datetime.strptime(call.data[1:], '%Y-%m-%d %H:%M:%S')
        if time_finish > time_now:
            time_ = str(time_finish - time_now)
            bot.answer_callback_query(call.id, f"–û—Å—Ç–∞–ª–æ—Å—å {time_} –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É–∫—Ü–∏–æ–Ω–∞", show_alert=True)
        else:
            bot.answer_callback_query(call.id, f"–ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–∏–ª—Å—è", show_alert=True)
    elif call.data == 'info':
        # print(call)
        bot.answer_callback_query(call.id, f"–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", show_alert=True)
    elif call.data[0] == '$':
        list_data = call.data.split('.')
        print(list_data)
    elif call.data[0:3] == 'dop':
        bot.send_document(call.from_user.id, document=open('D:\–ü–∞–π—Ç–æ–Ω\Auction\Bot\Inform.rar', 'rb'))
    elif call.data == '–û—Ç–º–µ–Ω–∞':
        bot.delete_message(call.from_user.id, call.message.message_id)
    elif call.data == 'Menu':
        bot.delete_message(call.from_user.id, call.message.message_id)
        bot.send_message(call.from_user.id, '–Ø –±–æ—Ç –∞—É–∫—Ü–∏–æ–Ω–æ–≤ @My_lessons_bot \n'
                                            '–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ª–æ—Ç–∞–º–∏, –∏ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å \n'
                                            '—Ö–æ–¥ –∞—É–∫—Ü–∏–æ–Ω–∞. –ê —Ç–∞–∫ –∂–µ –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º–∏ \n'
                                            '–±–∞–ª–∞–º–∏. \n'
                                            '–£–¥–∞—á–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤ ü§ù', reply_markup=keyb_start2())
    elif call.data == 'b22':
        bot.delete_message(call.from_user.id, call.message.message_id)
        bot.send_message(call.from_user.id, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –Ω–µ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è', reply_markup=keyb_menu())
    elif call.data == 'b24':
        bot.delete_message(call.from_user.id, call.message.message_id)
        bot.send_message(call.from_user.id, '–ï—Å–ª–∏ –≤—ã –Ω–µ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —Å–¥–µ–ª–∫—É –≤ —Ç–µ—á–µ–Ω–∏–∏ 3 –¥–Ω–µ–π \n'
                                            '–ø—Ä–æ–¥–∞–≤–µ—Ü –≤ –ø—Ä–∞–≤–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≤–∞—Å –∂–∞–ª–æ–±—É. –ü–æ–ª—É—á–∏–≤ —Ç—Ä–∏ \n'
                                            '–∂–∞–ª–æ–±—ã –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä—É—é—Ç. \n'
                                            '–ï—Å–ª–∏ –≤—ã —Å–ª—É—á–∞–π–Ω–æ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É –∏–ª–∏ –Ω–∞—á–∞–ª–∏ —É—á–∞—Å—Ç–∏–µ \n'
                                            '–≤ –∞—É–∫—Ü–∏–æ–Ω–µ. –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º —Å–ª—É–∂–±—É —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏ \n'
                                            '–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º.', reply_markup=keyb_menu())
    elif call.data == 'b27':
        bot.delete_message(call.from_user.id, call.message.message_id)
        keub_ = keyb_menu()
        keub_.row(InlineKeyboardButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='+cash'))
        bot.send_message(call.from_user.id, '–ñ–º–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞', reply_markup=keub_)
    elif call.data == '+cash':
        bot.delete_message(call.from_user.id, call.message.message_id)
        mesg = bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        bot.register_next_step_handler(mesg, add_cash)
    elif call.data == 'cash_add':
        print(call)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, call.message.text + '\n –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ')


def add_cash(message):
    bot.send_message(message.chat.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {message.text} —Ä—É–±. \n"
                                      f"–û–∂–∏–¥–∞–π—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞.", reply_markup=keyb_menu())
    keyb_ = InlineKeyboardMarkup().add(InlineKeyboardButton("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å", callback_data='cash_add'))
    bot.send_message(id_groups["admin_group"], f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id - {user_byers(message.chat.id)}\n'
                                               f'–ø–æ–ø–æ–ª–Ω–∏–ª —Å—á–µ—Ç –Ω–∞ {message.text} —Ä—É–±.', reply_markup=keyb_)


def start_bot():
    print("Ready")
    bot.infinity_polling()

# t1 = threading.Thread(target=start_bot)
# t2 = threading.Thread(target=send_lot_in_group)
#
# t1.start()
# t2.start()
